<?php
/**
 * @file
 * Artesis Backend main module file.
 */

/**
 * Implements hook_permission().
 */
function artesis_backend_permission() {
  $perm = array();

  if (module_exists('color')) {
    $perm['alter color scheme'] = array(
      'title' => t('Change color scheme'),
      'description' => t('Enable access for using the color module, altering the site color scheme.'),
    );
  }

  $perm['change alpha settings'] = array(
    'title' => t('Change alpha-theme related settings'),
    'description' => t('Grant access to change the alpha basetheme settings.'),
  );

  $perm['change common theme settings'] = array(
    'title' => t('Change theme settings'),
    'description' => t('Enable, to allow change of common theme settings.')
  );

  return $perm;
}

/**
 * Implements hook_FORM_ID_alter().
 *
 * Alter the theme settings form.
 */
function artesis_backend_form_system_theme_settings_alter(&$form, &$form_state) {
  $common_settings = array(
    'theme_settings',
    'logo',
    'favicon',
  );

  $change_theme_settings = user_access('change common theme settings');
  $change_alpha_settings = user_access('change alpha settings');
  $change_color_settings = module_exists('color') && user_access('alter color scheme');

  $submit_keys = array();
  $validate_keys = array();

  // Perform some element removal, so no notices appear on saving settings
  // form, when certain sections are not available due to permission
  // restrictions.

  // Remove common settings form elements and store submit/validate handlers,
  // for further removal.
  if (!$change_theme_settings) {
    foreach ($common_settings as $v) {
      unset($form[$v]);
    }

    $submit_keys[] = array_keys($form['#submit'], 'system_theme_settings_submit');
    $validate_keys[] = array_keys($form['#validate'], 'system_theme_settings_validate');
  }

  // Remove alpha theme settings form elements and store submit/validate
  // handlers, for further removal.
  if (!$change_alpha_settings) {
    unset($form['alpha_settings']);

    $submit_keys[] = array_keys($form['#submit'], 'alpha_theme_settings_form_submit');
    $validate_keys[] = array_keys($form['#validate'], 'alpha_theme_settings_form_validate');
  }

  // Remove color module settings form elements and store submit/validate
  // handlers, for further removal.
  if (!$change_color_settings) {
    unset($form['color']);

    $submit_keys[] = array_keys($form['#submit'], 'alpha_theme_settings_form_submit');
    $validate_keys[] = array_keys($form['#validate'], 'alpha_theme_settings_form_validate');
  }

  // Remove validate handlers.
  foreach ($validate_keys as $v) {
    if (isset($v[0]) && isset($form['#validate'][$v[0]])) {
      unset($form['#validate'][$v[0]]);
    }
  }

  // Remove submit handlers.
  foreach ($submit_keys as $v) {
    if (isset($v[0]) && isset($form['#submit'][$v[0]])) {
      unset($form['#submit'][$v[0]]);
    }
  }
}

/**
 * Refresh the login box via AJAX.
 *
 * @return Array
 *   Set of AJAX commands.
 */
function artesis_backend_refresh_login() {
  drupal_add_js(drupal_get_path('module', 'artesis_backend') . '/js/artesis_backend.scripts.js', 'file');
  // Get the login block related pieces and update the area via AJAX cmd's.
  $commands = array();
  $blocks = array();

  $blocks['ding_username'] = block_load('ding_user_frontend', 'ding-username');
  $blocks['ding_user_loan_number'] = block_load('ding_user_frontend', 'ding-user-loan-number');
  $blocks['user_menu'] = block_load('system', 'user-menu');

  $commands[] = ajax_command_invoke('.region-user-second-inner', 'html', array(render(_block_get_renderable_array(_block_render_blocks($blocks)))));
  $commands[] = ajax_command_artesis_backend_update_login();

  return $commands;
}

/**
 * Defines a custom AJAX command to fire necessary logic upon the login
 * block.
 *
 * @return Array
 *   AJAX-related custom command.
 */
function ajax_command_artesis_backend_update_login() {
  return array(
    'command' => 'artesis_backend_update_login',
  );
}
